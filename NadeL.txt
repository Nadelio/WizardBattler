x[num] -> define name and size of an array
x[num]+ -> increment index of x
x[num]- -> decrement index of x
x[num]+num -> increment index of x by num
x[num]+equation -> increment the index of x by equation
x[num]-num -> decrement index of x by num
x[num]-equation -> decrement the index of x by equation
x[]+ -> increment the size of x
x[]- -> decrement the size of x, will erase the last index of the array
x[]+num -> increment the size of x by num
x[]+equation -> increment the size of x by equation
x[]-num -> decrement the size of x by num
x[]-equation -> decrement the size of x by equation
x[num]=num -> set index of x to num
x[num]=equation -> set index of x by equation
x[]=num -> set size of x to num
x[]=equation -> set size of x by equation
out>x[num] -> output the index of x
out>x[] -> output the size of x
// new line variants for out commands look like: outln>...
in>x[num] -> input an integer into the index of x
in>x[] -> input an integer into the size of x
y(equation) -> for loop, y is the number of times the equation in the parenthesis will run
?(comparison):equation: -> define an if statement, inside the colons would be the equation that would run when if statement is successful
!:equation: -> else clause to an if statement
!?:equation: -> else if clause to an if statement
x[] -> x[abc] -> convert a number array to a letter array
x[abc] -> x[] -> convert a letter array to a number array
x[num]=L -> set index of x to L // assume this is a letter array
; -> end line character
--------------------------------------------------------------------------------------
// num is a stand-in for any integer

// L is a stand-in for any letter a-z (excluding capitilized letters)

// x is a stand-in for any variable name

// -> defines the behavior of the symbols to the left of it 
//    excluding lines 21 and 22, in which they are also part of the syntax for converting arrays to different types

// an equation can be one or more of the previous lines with an endline character at the end of the equation (or the end of each equation if inside of an ?/!?/! statement)

// a comparison is two equations (without endlines) or numbers/letters with a comparison symbol (==, <=, >=, <, >, !=)

// I am using Java's comment syntax as it is one of the most recognizable syntax for comments and is used in a wide variety of languages
// so double slashes (// text after here is a comment ) and slash-astrick (/* text in here is a comment as well */) denotes comments 
======================================================================================
EXAMPLE CODE
--------------------------------------------------------------------------------------
x[3]; // creates an array named x that is the size 3
x[0]+; // increments the first index of x
out>x[0]; // outputs the first index of x, which is 1
--------------------------------------------------------------------------------------
x[3]; // creates an array named x that is the size 3
y[1]; // creates an array named y that is the size 1
3( x[y[0]]+y[0]; y[0]+;); // runs a loop 3 times, the loop adds y[0] to x[y[0]], then adds 1 to y[0]
y[0]=0; // sets the first index of y to 0
3( out>x[y[0]]; y[0];) // runs a loop 3 times, the loop outputs the value of x[y[0]], then adds 1 to y[0] // the output should be: 012
--------------------------------------------------------------------------------------
// something of note, size 1 arrays can be a substitute for single variables, although it could be useful to keep an array of single
// variables with a single array index variable that you then set as a sort of psuedo pointer
// like:
x[3]; // the array of variables
y[1]; // the array you'd use for storing your index
// an alternative is combining the two into one array:
x[4]; // in this case, the first index, x[0], would be the variable that acts as the "pointer" for the rest of the array.
x[0]=1; // points to the first non-index variable
x[x[0]]=4; // sets x[1] to 4
x[1]=0; // set x[1] to 0
// now this may be inefficient as you could directly change any index of an array manually, but for loops, this could be a useful mechanic
// as an example:
3(x[x[0]]+; x[0]+;) // this should follow similar behavior to the previous example of a loop, while utilizing less arrays
======================================================================================
// I am thinking of a way to convert int arrays to letters, but I can't think up any decent syntax, maybe an arrow?
// like:
x[1]; // makes an array of size 1 called x
x[] -> x[abc]; // converts all numbers to lettered counterparts, if over 26, loop back around to start, continue this rule as needed, 26 is whitespace character
outln>x[0]; // outputs "a"
// and to turn it back into numbers, just do:
x[abc] -> x[]; // converts all letters to number counterparts 0 - 25
outln>x[0]; // outputs 0
// this functionality could be used for editing individual letters to follow a pattern
// you can also just use the same commands for number arrays as letter arrays, excluding the increment/decrement commands:
x[] -> x[abc]; // converts to letter array
x[0]=b; // converts index 0 from "a" to "b"
x[abc] -> x[]; // converts to number array
outln>x[0]; // outputs 1
======================================================================================
MORE EXAMPLE CODE
--------------------------------------------------------------------------------------
position[2]; // I'm gonna do some simple stuff here in order to create a "function", like what happens in algebra
// [x, y]
position[0]+; // increment x value by 1
position[1]=position[0]+3; // sets y value to x+3

out>position[0]; // outputs 1

whitespace[1]; whitespace[0]=26; whitespace[] -> whitespace[abc]; out>whitespace[0];
// creates an array called "whitespace" of size 1, sets the first index to 26, then converts to letter array and outputs the first index of "whitespace"

outln>position[1];// outputs 4\n
// full output looks like: 1 4\n
--------------------------------------------------------------------------------------
// put the above code into a loop looks like:
position[2];
whitespace[1]; whitespace[0]=26; whitespace[] -> whitespace[abc];
10(position[1]=position[0]+3; out>position[0]; out>whitespace[0]; outln>position[1]; position[0]+;)
// output would look like:
/*
> 0 3
> 1 4
> 2 5
> 3 6
> 4 7
> 5 8
> 6 9
> 7 10
> 8 11
> 9 12
*/
--------------------------------------------------------------------------------------
// simple if/else example
x[3];
word[6]; word[] -> word[abc];
word[0]=e; word[1]=q; word[2]=u; word[3]=a; word[4]=l; word[5]=s;
x[0]+;
x[1]=2;
?(x[0]==x[1]):word[](out>word[x[2]]; x[2]+;) outln>;:
!?(x[0]>x[1]):x[0]-;:
!:x[0]+;:

// behavior: outputs "equals" if the first index of x is equal to the second index of x, if it is greater, decrement the first index, if less than, increment first index
--------------------------------------------------------------------------------------